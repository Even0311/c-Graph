template<typename N,typename E>
    Graph<N,E>::Graph()
            :node_map{std::map<N,std::shared_ptr<Graph<N,E>::Node>>{}},
             it{node_map.begin()}

    {

    };

// copy constructor of Graph
    template<typename N, typename E>
    Graph<N,E>::Graph(const Graph &rhs)
    {
        for(auto itr = rhs.node_map.begin(); itr!= rhs.node_map.end();++itr){
            addNode(itr->first);
        }
        for(auto itr1 = rhs.node_map.begin(); itr1 != rhs.node_map.end();++itr1){
            for(auto itr1_in = itr1->second->edge.begin(); itr1_in != itr1->second->edge.end();++ itr1_in){
                addEdge(itr1->first, (*itr1_in)->destination->value_,(*itr1_in)->weight_);
            }
        }
    } ;

// copy assignment of Graph
    template<typename N, typename E>
    Graph<N,E>& Graph<N,E>::operator=(const Graph<N,E> &rhs)
    {
        if(!(*this == rhs)){
            node_map.clear();
            for(auto itr = rhs.node_map.begin(); itr!= rhs.node_map.end();++itr){
                addNode(itr->first);
            }
            for(auto itr1 = rhs.node_map.begin(); itr1 != rhs.node_map.end();++itr1){
                for(auto itr1_in = itr1->second->edge.begin(); itr1_in != itr1->second->edge.end();++ itr1_in){
                    addEdge(itr1->first, (*itr1_in)->destination->value_,(*itr1_in)->weight_);
                }
            }
        }

        return *this;
    };

//move constructor of Graph
    template<typename N, typename E>
    Graph<N,E>::Graph(Graph<N,E> &&rhs) noexcept
            :node_map{std::move(rhs.node_map)}
    {
        rhs.node_map.clear();
    }

// move assignment of Graph
    template<typename N, typename E>
    Graph<N,E>& Graph<N,E>::operator=(Graph<N,E>&& rhs) noexcept
    {
        if(!(*this == rhs)){
            node_map = std::move(rhs.node_map);
            rhs.node_map.clear();
        }

        return *this;
    };

//destructor
    template<typename N, typename E>
    Graph<N,E>::~Graph(){};

    template<typename N, typename E>
    bool Graph<N,E>::addNode(const N & node)
    {
        if(isNode(node)){
            return false;
        }
        else{
            node_map[node] =  std::make_shared<Node>(Node(node));
            return true;
        }
    };

    /* This is the function to add an Edge to the Graph
     It throws a std::runtime_error if either source node or  destination node does not exist
     */
    template<typename N, typename E>
    bool Graph<N,E>::addEdge(const N & sor, const N & det, const E & wei)
    {
        // check whether boto source and destination node exist , if not throw
        if(!isNode(sor)||!isNode(det)){
            throw std::runtime_error{""};
        }
        else{
            // Here , both source ande destination are guaranteed to exist,
            // get the shared_ptr which pointed to this two nodes from node_map
            auto ptrsor = node_map[sor];
            auto ptrdet = node_map[det];

            // generate a shared_ptr which pointed to the candidate edge
            auto newedge = std::make_shared<typename Graph<N,E>::Node::Edge>(typename Node::Edge(wei,ptrdet));

            auto lbd = [&newedge] (std::shared_ptr<typename Graph<N,E>::Node::Edge> & rhs) -> bool
            {
                return *rhs == *newedge;
            };
            // if the candidate edge already exists, return false
            if(std::find_if(ptrsor->edge.begin(),ptrsor->edge.end(),lbd) != ptrsor->edge.end()){
                return false ;
            }
                // adding the new edge under the control of source_node
                // and notice the destination , there is a new source .
            else{
                ptrsor->edge.push_back(newedge);
                ptrdet->source_node.push_back(ptrsor);
                return true ;
            }

        }

    };

    /*This function replaced the oldnode with a new node , if the oldnode does not exist
     * then a std::runtime_error will be throwed
     * If the newnode already exists , return false
     *Otherwise return true
     */
    template<typename N, typename E>
    bool Graph<N,E>::replace(const N & oldnode, const N & newnode)
    {
        if(!isNode(oldnode)){
            throw std::runtime_error{""};
        }
        else{
            if(isNode(newnode)){
                return false;
            }

            else{
                auto temp = node_map[oldnode];
                node_map.erase(oldnode);

                temp->value_ = newnode;
                node_map[newnode] = temp;
                return true;
            }
        }
    };
    template<typename N, typename E>
    void Graph<N,E>::mergeReplace(const N & olddata, const N & newdata)
    {
        if(!isNode(olddata) || !isNode(newdata)){
            throw std::runtime_error{""};
        }
        else{
            // first step, for all edges from olddata to destination data ,
            // make their source as newdata
            auto ptr_to_old = node_map[olddata];
            auto ptr_to_new = node_map[newdata];
            for(auto itr = ptr_to_old->edge.begin(); itr != ptr_to_old->edge.end();++itr){
                // for every edge of the edge_vector, checking whether this edge already exist
                // in the destination_edge_vector


                // check whether the destination of current_node is connected , otherwise just add
                // the node , do not have to traversal
                if(isConnected((*itr) ->destination->value_ , ptr_to_new->value_)||isConnected(ptr_to_new->value_,(*itr) ->destination->value_)){
                    // indicating that B and current_destination node is connected
                    // further checking is needed to check whether new edge is a duplicated edge .
                    auto lbd = [&itr] (const std::shared_ptr<typename Graph<N,E>::Node::Edge>& edge_in_dest) -> bool
                    {
                        return *(*itr) == *edge_in_dest ;
                    };

                    auto the_index_of_matching_edge = std::find_if(ptr_to_new->edge.begin(),ptr_to_new->edge.end(),lbd);
                    // although they are connected ,still have to check whether the weight is the same .
                    if(the_index_of_matching_edge != ptr_to_new->edge.end()){
                        // indicates that current edge is a duplicate edge
                        continue;
                    }
                    else{
                        // indicates current edge is not a duplicate edge, then adding current edge to
                        // newdata's edge
                        ptr_to_new->edge.push_back(*itr);
                        (*itr)->destination->source_node.push_back(ptr_to_new);
                    }
                }
                else{
                    // indicating current_destination is not connected with newnode, so adding the edge into b's edge vector
                    ptr_to_new->edge.push_back(*itr);
                    (*itr)->destination->source_node.push_back(ptr_to_new);

                    // remove olddata from destination's source_node
                    auto lbd = [olddata] (const std::shared_ptr<typename Graph<N,E>::Node> & everynode) ->bool {
                        return !(everynode->value_ < olddata ||  olddata < everynode->value_);

                    };

                    auto the_index_of_olddata_in_source_node = std::find_if((*itr)->destination->source_node.begin(),
                                                                            (*itr)->destination->source_node.end(),lbd);
                    (*itr)->destination->source_node.erase(the_index_of_olddata_in_source_node);
                }

            }

            //second step , for all of those nodes that pointing to olddata , make them point to newdata

            for(auto itr1 = ptr_to_old->source_node.begin(); itr1 != (ptr_to_old->source_node.end());++itr1){
                if(isConnected((*itr1)->value_,newdata)||isConnected(newdata,(*itr1)->value_)){
                    //indicates the source node of olddata is connected will newdata,
                    // further checking is required


                    // below is going to find all the edges that pointing to olddata
                    auto labd = [&ptr_to_old] (const std::shared_ptr<typename Graph<N,E>::Node::Edge> & edge_points_to_old) ->bool
                    {
                        return *ptr_to_old == *(edge_points_to_old->destination) ;
                    };

                    // this edge now pointing to olddata
                    auto index_of_edge = std::find_if((*itr1)->edge.begin(),(*itr1)->edge.end(),labd);
                    while(index_of_edge != (*itr1)->edge.end()){
                        //index_of_edge is the position of current_edge, that pointing to olddata
                        // check whether this edge also pointed to newdata, and have the same weight

                        //Now I am going to find the edge which has the same weight as current edge
                        // at the same time , the goal edge points to the newdata from the source_node of current
                        // data,  such an edge means this is a duplicate edge
                        auto labd2 = [&index_of_edge,&ptr_to_new] (const std::shared_ptr<typename Graph<N,E>::Node::Edge> & edge_to_new) ->bool
                        {
                            auto weight_of_old_edge = (*index_of_edge)->weight_ ;
                            if((edge_to_new ->weight_ < weight_of_old_edge) || weight_of_old_edge < edge_to_new->weight_){
                                return false;
                            }
                            else{
                                return (*ptr_to_new) == *(edge_to_new->destination);
                            }
                        };
                        // indicating that current edge is a duplicate edge
                        auto the_index_of_the_common_edge = std::find_if((*itr1)->edge.begin(),(*itr1)->edge.end(),labd2);
                        if(the_index_of_the_common_edge != (*itr1)->edge.end()){
                            //indicates this is a common edge, so ignore it
                            index_of_edge = std::find_if(index_of_edge+1,(*itr1)->edge.end(),labd);

                            continue;
                        }
                        else{
                            (*index_of_edge ) ->destination = ptr_to_new;
                            ptr_to_new->source_node.push_back(*itr1);
                        }
                    }

                }
                else{
                    // making all the source edge pointing to the newdata node
                    auto labd = [&ptr_to_old] (const std::shared_ptr<typename Graph<N,E>::Node::Edge> & edge_points_to_old) ->bool
                    {
                        return (*ptr_to_old) == *(edge_points_to_old->destination) ;
                    };

                    auto edge_points_to_a = std::find_if((*itr1)->edge.begin(),(*itr1)->edge.end(),labd);
                    while(edge_points_to_a != (*itr1)->edge.end()){
                        (*edge_points_to_a) ->destination = ptr_to_new;
                        ptr_to_new->source_node.push_back(*itr1);

                        edge_points_to_a = std::find_if(edge_points_to_a + 1,(*itr1)->edge.end(),labd);
                    }
                }


            }
            deleteNode(olddata);

        }
    };
//
    template<typename N, typename E>
    // the function that delete a node from the graph
    void Graph<N,E>::deleteNode(const N & node) noexcept
    {
        if(isNode(node)){
            // lambda function that checks whether the destination node of an edge is the node to be deleted
            auto lbd = [&node] (const std::shared_ptr<typename Graph<N,E>::Node::Edge> & the_edge) -> bool
            {
                return !((the_edge->destination->value_ < node) || (node < the_edge->destination->value_));
            };
            auto ptrnode = node_map[node];
            // for every source node of current node which is going to be deleted
            for(auto itr = ptrnode->source_node.begin(); itr != ptrnode->source_node.end();++itr){
                // for every edge of current source node
                while( true){
                    auto edge_to_be_delete = std::find_if((*itr)->edge.begin(),(*itr)->edge.end(),lbd);
                    if(edge_to_be_delete != (*itr)->edge.end()){
                        (*itr)->edge.erase(edge_to_be_delete);
                    }
                    else{
                        break;
                    }
                }
            }

            // deleting node from the source_node list of all its successors
            auto lbd2 = [&node] (const std::shared_ptr<typename Graph<N,E>::Node> & dest_node) ->bool {
                return !(dest_node->value_ < node || node< dest_node->value_);
            };
            for(auto itr = ptrnode->edge.begin(); itr != ptrnode->edge.end();++itr){
                auto the_index_of_olddata_in_the_source_ndoe = std::find_if((*itr)->destination->source_node.begin(),
                                                                            (*itr)->destination->source_node.end(),lbd2);

//Here the_index_of_olddata is used to get the iter position after erase
// but I am not sure whether this is guaranteed to be safe as it was used at both sides
                // the meaning here maybe make reader a little confused
                // what I am doing here is deleting all the olddata from its successors source_node list
                // there maybe several olddatas in the source_node list
                // because one appearance  corresponding to one edge
                while(the_index_of_olddata_in_the_source_ndoe != (*itr)->destination->source_node.end()){
                    the_index_of_olddata_in_the_source_ndoe = (*itr)->destination->source_node.erase(the_index_of_olddata_in_the_source_ndoe);
                    the_index_of_olddata_in_the_source_ndoe = std::find_if(the_index_of_olddata_in_the_source_ndoe,
                                                                           (*itr)->destination->source_node.end(),lbd2);
                }
            }

            node_map.erase(node);

        }
    };

    /*
     * the function that deletes an edge from the graph
     */
    template <typename N, typename E>
    void Graph<N,E>::deleteEdge(const N & sor, const N & det, const E & wei) noexcept
    {
        if(!isNode(sor) || !isNode(det)){
            return ;
        }

        else{
            auto ptrsor = node_map[sor];
            auto ptrdet = node_map[det];

            auto the_edge = typename Graph<N,E>::Node::Edge(wei,ptrdet);

            auto lbd = [&the_edge] (const std::shared_ptr<typename Graph<N,E>::Node::Edge>& candidate_edge) -> bool
            {
                return the_edge == *candidate_edge;
            };

            auto tem_edge_itr = std::find_if(ptrsor->edge.begin(), ptrsor->edge.end(),lbd);
            if(tem_edge_itr != ptrsor->edge.end()){
                ptrsor->edge.erase(tem_edge_itr);
                // finding the node which is the same as the node going to be deleted .
                auto lbd2 = [ptrsor] (const std::shared_ptr<typename Graph<N,E>::Node> & node_in_the_source) -> bool
                {
                    return *ptrsor == *node_in_the_source;
                };
                auto delete_from_source = std::find_if(ptrdet->source_node.begin(),ptrdet->source_node.end(),lbd2);
                ptrdet->source_node.erase(delete_from_source);
            }


        }
    }

    // clears the graph
    template <typename N, typename E>
    void Graph<N,E>::clear() noexcept
    {
        node_map.clear();
    }

    template <typename N, typename E>
    bool Graph<N,E>::isNode(const N & node) const
    {
        return (node_map.find(node)) != (node_map.end());
    }
//
    template<typename N, typename E>
    bool Graph<N,E>::isConnected(const N & src, const N & dst) const
    {
        if((!isNode(src)) || (!isNode(dst))){
            throw std::runtime_error{""};
        }

        else{
            auto ptrsor = node_map.at(src);
            auto ptrdet = node_map.at(dst);
            auto lbd = [& ptrsor] (const std::shared_ptr<typename Graph<N,E>::Node> & rhs) -> bool
            {
                return *rhs == *ptrsor;
            };
            auto flag =  std::find_if(ptrdet->source_node.begin(), ptrdet->source_node.end(),lbd) != ptrdet->source_node.end();
            return flag;
        }
    }

    template <typename N, typename E>
    void Graph<N,E>::printNodes() const
    {
        std::vector<std::pair<N,std::shared_ptr<Node>>> vec(node_map.begin(),node_map.end());


        auto lbd = [](const std::pair<N,std::shared_ptr<Node>> & lhs,const std::pair<N,std::shared_ptr<Node>> & rhs )
        {
            if(lhs.second->edge.size() < rhs.second->edge.size()){
                return true;
            }
            else if(rhs.second->edge.size() < lhs.second->edge.size()){
                return false;
            }
            else{
                return lhs.second->value_  < rhs.second->value_ ;
            }
        };

        std::sort(vec.begin(),vec.end(),lbd);
        for(auto it= vec.begin(); it != vec.end(); ++ it){
            std::cout<< it->second->value_<<'\n';
        }


    }











    /*
     * This is the print edge function ,
     */

    template<typename N, typename E>
    void Graph<N,E>::printEdges(const N & node) const {
        // check whether the node exist in the graph
        if(!isNode(node)){
            throw std::runtime_error{""};
        }
        else{
            auto ptrnode = node_map.at(node);

            // lambda function , check whether the destination node of an edge exists

            // lambda function 2, if the weight of left < the weight of rhs ,return true
            // if they are the same , the edge whose destination node has smaller value will
            // be prefered
            auto lbd2 = [](const std::shared_ptr<typename Node::Edge> & left,const std::shared_ptr<typename Node::Edge> & right)->bool
            {
                if(left->weight_ < right->weight_){
                    return true;
                }
                else if(right->weight_ < left->weight_){
                    return false;
                }
                else{
                    return (left->destination->value_ )< (right->destination->value_);
                }

            };

            // sort the vector according to the function lambda2
            auto tempvec = ptrnode->edge;
            std::sort(tempvec.begin(),tempvec.end(),lbd2);

            // print edges out
            std::cout<<"Edges attached to Node "<<node<<'\n';
            if( tempvec.size()){
                for(auto it = tempvec.cbegin(); it!= tempvec.cend(); ++it){

                    std::cout<< (*it)->destination->value_<<" "<<(*it)->weight_<<'\n';

                }
            }
            else{
                std::cout<<"(null)"<<'\n';
            }

        }
    };

    template <typename N, typename E>
    void Graph<N,E>::begin() const
    {
        it = node_map.cbegin();
    }

    template <typename N, typename E>
    bool Graph<N,E>::end() const
    {
        return it == node_map.cend();
    }

    template <typename N, typename E>
    void Graph<N,E>::next() const
    {
        ++it;
    }

    template <typename N, typename E>
    const N& Graph<N,E>::value() const
    {
        return it->first;
    }


// constructor of struct Node
    template<typename N, typename E>
    Graph<N,E>::Node::Node(const N & node)
            :value_{node},
             edge{std::vector<std::shared_ptr<Edge>> {}},
             source_node{std::vector<std::shared_ptr<Node>> {}}
    {};

// copy constructor of struct Node
    template <typename N, typename E>
    Graph<N,E>::Node::Node(const Node & rhs)
            :value_{rhs.value_},
             edge{rhs.edge},
             source_node{rhs.source_node}
    {};

//copy assignment of struct Node
    template <typename N, typename E>
    typename Graph<N,E>::Node& Graph<N,E>::Node::operator=(const Node& rhs)
    {
        if(!(*this == rhs)){
            value_ = rhs.value_;
            edge = rhs.edge;
            source_node = rhs.source_node;
        }

        return *this;
    };

//move constructor of struct Node
    template <typename N, typename E>
    Graph<N,E>::Node::Node(Node&& rhs) noexcept
            :value_{std::move(rhs.value_)},
             edge{std::move(rhs.edge)},
             source_node{std::move(rhs.source_node)}

    {

        rhs.edge.clear();
        rhs.source_node.clear();
    };

//move assignment of struct Node
    template <typename N, typename E>
    typename Graph<N,E>::Node& Graph<N,E>::Node::operator=(Node&& rhs) noexcept
    {
        if(!(*this == rhs)){
            value_ = std::move(rhs.value_);
            edge = std::move(rhs.edge);
            source_node = std::move(rhs.source_node);


            //rhs.value_ = 0;
            rhs.edge.clear();
            rhs.source_node.clear();
        }

        return *this;
    };

// destructor of struct Node
    template <typename N, typename E>
    Graph<N,E>::Node::~Node(){};







// constructor of Edge
    template<typename N, typename E>
    Graph<N,E>::Node::Edge::Edge(const E & wei, const std::shared_ptr<Node>& det)
            :weight_{wei},
             destination{det}
    {};

// copy constructor of Edge
    template<typename N, typename E>
    Graph<N,E>::Node::Edge::Edge(const Edge& rhs)
            :weight_{rhs.weight_},
             destination{rhs.destination}
    {};

// copy assignment of Edge
    template<typename N, typename E>
    typename Graph<N,E>::Node::Edge&    Graph<N,E>::Node::Edge::operator=(const Edge & rhs)
    {
        if(!(*this == rhs)){
            weight_ = rhs.weight_;
            destination = rhs.destination;
        }

        return *this;
    };

// move constructor of Edge

    template<typename N, typename E>
    Graph<N,E>::Node::Edge::Edge(Edge&& rhs)noexcept
            :weight_{std::move(rhs.weight_)},
             destination{std::move(rhs.destination)}
    {
        //rhs.weight_ = 0;
        //rhs.destination.reset();
    };

// move assignment
    template <typename N, typename E>
    typename Graph<N,E>::Node::Edge&   Graph<N,E>::Node::Edge::operator=(Edge &&rhs) noexcept
    {
        if(!(*this == rhs)){
            weight_ = std::move(rhs.weight_);
            destination = std::move(rhs.destination);

            //rhs.weight_ = 0;
            // rhs.destination.reset();
        }

        return *this;
    };
// destructor
    template <typename N, typename E>
    Graph<N,E>::Node::Edge::~Edge() {};
